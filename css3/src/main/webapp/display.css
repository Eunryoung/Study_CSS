@charset "UTF-8";

/* nav */
nav li {
	background-color: #a00;
	display: inline-block; /* 메뉴들을 나란히 */
	width: 150px; height: 30px;
	border-radius: 10px 0 0 0; /* 모서리 깎기, 대각선 짝지어서 값 지정 */
	text-align: center;
	line-height: 30px; /* 행간 = 영역의 높이값
	height와 같은 값 지정시 수직정렬 가운데 */
}

/* 메뉴에 마우스오버 시 색상 바꾸기 */
nav li:hover {
	background-color: #0a0;
	transition: 1.2s;
}

nav a {
/* 	border: 1px solid #0d0; */
	width: 150px; height: 30px;  
/* a 태그는 inline 요소이므로 크기 변경 불가능 */
/* => display : block; 설정 할 것! */
	display: block;
	color: #fff; 
	text-decoration: none;
	text-transform: capitalize;
}

nav a:link, nav a:visited {
	/* 1. 링크의 평상시 상태(초기상태, 방문한 링크 상태) */
	color: #fff;
}

nav a:hover, nav a:active {
	/* 2. 링크의 동작시 상태(오버, 활성화) */
	color: #030;
}

/* [ 주의 ] */
/* 평상 시(1번)와 동작 시(2번)의 명시 순서가 바뀌면 안됨! */
/* 동작시 상태 지정보다 평상시 상태를 먼저 지정해야 제대로 적용된다! */
/* 1번 없이 2번 명시할 경우 변화 X */

/* 1. display: block; */
.in {
	border: 1px solid #00d;
	/* 크기 지정 불가! */	
	width: 150px; height: 50px;
	/* 상하 여백 지정 불가! */	
	margin: 30px;
	display: block;
	/* inline 태그를 block 태그로 변경!
	=> 크기와 상하 여백이 변경됨
	=> 한 줄에 나란히 올 수 없게 됨
	 */
}
/* hover 설정 : 마우스오버 시 inline으로 다시 돌리기 */
#sec01:hover>.in {
	display: inline;	
}

/* display: inline; */
.bl {
	border: 1px solid #d00;
	width: 150px; height: 50px;
	margin: 30px;
/*	=> 공간이 생겨도 한 줄에 한 개만 옴 */
	display: inline;
/*	=> block 태그를 inline 태그로 변경시 한 줄로 됨
	=> 크기와 위 아래 여백이 사라짐
	*/
}

/* hover 설정 : 마우스오버 시 block으로 다시 돌리기 */
#sec02:hover>.bl {
	display: block;
}

/* 3. display:inline-block; */
#sec03>*:not(h2) { 
/* 전체선택자 *는 모든 요소를 지정 (id가 sec03 인 영역의 하위요소 전체를 지정) */
/* 부정선택자 A:not(B)는 A 요소 중 적용 제외할 요소(B)를 지정(h2 태그 제외) */
	border: 1px solid #0d0;
	width: 150px; height: 50px;
	margin: 30px;
	display:inline-block;	
	/* 
	공간이 있다면 크기, 상하여백 적용 된 채로 한 줄 안에 나란히 위치 
	*/

}

/* 4. display:none; */
#sec04>*:not(h2) {
	border: 1px solid #880;
}

.dn01 {
	background-color: #aa0;
	display: none;
	/* 배경색을 지정한 요소 자체(클래스 속성명이 dn01)가 사라짐 */
}

/* 상위 요소에 마우스 오버시 display: none 속성 제거 */
#sec04:hover>.dn01 {
	display: inline;
}
/* => b태그는 기존 속성이 display: inline이므로 inline으로 지정 */

.dn02 {
	background-color: #a0a;
	display: none;
	/* 배경색을 지정한 요소 자체(클래스 속성명이 dn02)가 사라짐 */
}

/* 상위 요소에 마우스 오버시 display: none 속성 제거 */
/* #sec04:hover>.dn02 { */
/* 	display: block; */
/* } */
/* => aside태그는 기존 속성이 display: block이므로 block으로 지정 */

/* 형제 요소(앞서 나온 요소)에 마우스 오버시 display: none 속성 제거 */
/* 현재 예제에서는 label 태그로 적용해본다! */
#sec04>label:hover+.dn02 {
	/* A+B : 형제 관계인 A의 바로 뒤에 있는 B만 지정 */
	/* + 기호는 바로 뒤 요소 하나만 지정! */
	display: block;
}

/* 형제 요소를 span 태그로 적용해보는 경우 */
#sec04>span:hover~.dn02 {
	/* A~B : 형제 관계인 A의 뒤에 있는 B 모두 지정 */
	/* span 태그는 바로 뒤가 아니므로 + 기호 적용 X */
	/* 바로 뒤가 아니라 넓은 의미의 뒤라는 뜻으로 ~ 기호 사용! */
	display: block;
}

#sec04>h2>i {
	background-color: #fa0;
	font-size: 12px;
	font-style: normal;
	font-weight: normal;
}

/* 상위 요소에 마우스 오버시 i 태그 영역에 display: none 속성 적용 */
#sec04:hover>h2>i {
	display: none;
}

/* 5. visibility:hidden; */
#sec05>*:not(h2) {
	border: 1px solid;
	/* 아이디값이 sec05인 요소에서 h2 태그 제외한 모든 요소에 테두리 값 적용*/
}

.vs01 {
	background-color: #0aa;
	visibility: hidden;
}

.vs02 {
	background-color: #aa0;
	visibility: hidden;
}

/* 상위 요소에 마우스 오버시 b 태그 영역에 visibility : visible 속성 적용 */
#sec05:hover>.vs01 {
	visibility: visible;
}

/* 형제 요소에 마우스 오버시 aside 태그 영역에 visibility : visible 속성 적용 */
#sec05>label:hover+.vs02 {
	visibility: visible;
}
/* sec04, sec05번 을 나란히 위치하도록(크기까지!) */
#sec04, #sec05 {
	display: inline-block;
	width: 42%;
	vertical-align: top; 
	/* inline 요소들끼리의 수직 정렬 : 위를 기준으로 정렬 */
}